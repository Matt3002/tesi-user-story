# writer/writer_azure_openai.py
# This module handles the generation part of the RAG pipeline using the Azure OpenAI service.
# It takes the retrieved context and the original query, constructs a structured prompt,
# and calls the specified GPT model deployment to generate the final user story.

import os
from openai import AzureOpenAI
from dotenv import load_dotenv

# Load environment variables from the .env file.
load_dotenv()

# --- Deployment Configuration ---
# IMPORTANT: This must be the *deployment name* you created in the Azure AI Studio,
# not the base model name (e.g., "gpt-4o").
AZURE_OPENAI_DEPLOYMENT_NAME = "gpt-4o"
# ---

def write(productContext: str, assignment: str) -> str:
    """
    Generates a response using a model deployed on Azure OpenAI.
    
    Args:
        productContext (str): The context retrieved from the knowledge base.
        assignment (str): The original user query.
        
    Returns:
        str: The user story generated by the model.
    """
    try:
        # Initialize the Azure OpenAI client using credentials from environment variables.
        client = AzureOpenAI(
            api_key=os.getenv("AZURE_OPENAI_API_KEY"),
            api_version="2024-02-01",
            azure_endpoint=os.getenv("AZURE_OPENAI_ENDPOINT")
        )

        # Construct the message payload for the chat completions API.
        response = client.chat.completions.create(
            model=AZURE_OPENAI_DEPLOYMENT_NAME, # Use the deployment name here.
            messages=[
                {
                    "role": "system",
                    "content": (
                        "Sei un Product Manager Agile esperto. La tua missione è generare user story precise e ben formattate.\n"
                        "REGOLE OBBLIGATORIE:\n"
                        "1. FORMATO: Ogni user story deve seguire la sintassi: \"Come <tipo di utente>, voglio <azione>, così da <beneficio>.\"\n"
                        "2. RISPOSTE MULTIPLE: Se la richiesta contiene più funzionalità, genera una user story per ciascuna, separata da una riga vuota.\n"
                        "3. CONTESTO: Basa la tua risposta SOLO sul contesto fornito. Se il contesto è insufficiente, rispondi con: \"Contesto non sufficiente.\"\n"
                        "4. NESSUN COMMENTO: Fornisci solo le user story, senza frasi introduttive o spiegazioni.\n"
                        "5. LINGUA: Tutte le risposte devono essere in italiano."

                    )
                },
                {
                    "role": "user",
                    "content": (
                        f"# Context retrieved from Azure AI Search\n{productContext}\n\n"
                        f'# Task\nBased ON THE PROVIDED CONTEXT, generate a complete user story for the following request: "{assignment}"'
                    )
                }
            ]
        )
        return response.choices[0].message.content
    except Exception as e:
        print(f"Error during Azure OpenAI API call: {e}")
        return "An error occurred while generating the response with Azure OpenAI."
